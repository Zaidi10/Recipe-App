{"version":3,"sources":["recipe.js","App.js","serviceWorker.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","ingredient","text","src","alt","App","useState","recipies","setRecipies","search","setSearch","final","setFinal","useEffect","getRequest","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","value","onChange","target","type","key","label","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"4PAiBeA,EAdA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,yBAAKC,UAAWC,IAAMC,QACpB,4BAAKN,GACL,4BACGG,EAAYI,IAAI,SAAAC,GAAU,OACzB,4BAAKA,EAAWC,SAGpB,wCAAcR,GACd,yBAAKG,UAAWC,IAAMH,MAAOQ,IAAKR,EAAOS,IAAI,OC4CpCC,G,YApDH,WACV,IADgB,EAGgBC,mBAAS,IAHzB,mBAGTC,EAHS,KAGCC,EAHD,OAIYF,mBAAS,IAJrB,mBAITG,EAJS,KAIDC,EAJC,OAKUJ,mBAAS,WALnB,mBAKTK,EALS,KAKFC,EALE,KAWhBC,oBAAU,WACRC,KACC,CAACH,IAEJ,IAAMG,EAAU,sCAAG,8BAAAC,EAAA,qEACMC,MAAM,mCAAD,OACSL,EADT,mBAff,WAee,oBAdd,mCAcc,sDADX,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAYW,EAAKC,MACjBC,QAAQC,IAAIH,EAAKC,MANA,yCAAH,qDAchB,OACE,yBAAKvB,UAAU,OACb,0BAAMA,UAAU,cAAc0B,SARhB,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,MAMN,2BAAOb,UAAU,aAAa6B,MAAOjB,EAAQkB,SAzBlC,SAAAH,GACfd,EAAUc,EAAEI,OAAOF,UAyBf,4BAAQG,KAAK,SAAShC,UAAU,iBAAhC,WAIF,yBAAKA,UAAU,WACZU,EAASP,IAAI,SAAAD,GAAM,OAClB,kBAAC,EAAD,CACE+B,IAAK/B,EAAOA,OAAOgC,MACnBtC,MAAOM,EAAOA,OAAOgC,MACrBrC,SAAUK,EAAOA,OAAOL,SACxBC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,oBCrCnBoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB,kBElInBC,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB","file":"static/js/main.8aecbfcc.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1>{title}</h1>\r\n      <ol>\r\n        {ingredients.map(ingredient => (\r\n          <li>{ingredient.text}</li>\r\n        ))}\r\n      </ol>\r\n      <p>Calories: {calories}</p>\r\n      <img className={style.image} src={image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from \"react\";\nimport Recipe from \"./recipe.js\";\nimport \"./App.css\";\nimport { async } from \"q\";\n\nconst App = () => {\n  const APP_ID = \"c8eceb07\";\n  const APP_KEY = \"ce29c8c2b7927a9658974a56299392d5\";\n  const [recipies, setRecipies] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [final, setFinal] = useState(\"chicken\");\n\n  const getinput = e => {\n    setSearch(e.target.value);\n  };\n\n  useEffect(() => {\n    getRequest();\n  }, [final]);\n\n  const getRequest = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${final}&app_id=${APP_ID}&app_key=${APP_KEY}&from=0&to=3&calories=591-722&health=alcohol-free`\n    );\n    const data = await response.json();\n    setRecipies(data.hits);\n    console.log(data.hits);\n  };\n  const getSubmit = e => {\n    e.preventDefault();\n    setFinal(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form className=\"search-form\" onSubmit={getSubmit}>\n        <input className=\"search-bar\" value={search} onChange={getinput} />\n        <button type=\"submit\" className=\"search-button\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipies.map(recipe => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__2WPMa\",\"image\":\"recipe_image__16fLy\"};"],"sourceRoot":""}